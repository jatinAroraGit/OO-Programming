/***********************************************************
Workshop 7: HOME
_____________________
| NAME - JATIN ARORA  |
| 136897162           |
|_____________________|
!#^*(&!^@
DATE - 07/16/17
FILE - Hero.cpp

// PURPOSE - this file includes definiton of member functions of the class and two constructors along with 2 non-member functions
*******************************************************************/


#define _CRT_SECURE_NO_WARNINGS
//headers
#include <cstring>
#include <iostream>
#include "Hero.h"
using namespace std;

namespace sict{
// Default constructor

Hero::Hero()
{
//setting everything to empty state
	m_name[0] = '\0';
	m_attack = 0;
	m_maximumHealth = 0;
	m_health = 0;
}

// Constructor with 3 arguments
 
Hero::Hero(const char name[], int maximumHealth, int attack)
{
	strncpy(m_name, name, L);
	m_name[L - 1] = '\0';
	m_maximumHealth = maximumHealth;
	m_attack = attack;
	m_health = m_maximumHealth;


}


// Hero::isEmpty () funtion defintion
// return true if the Hero object is uninitialized
//
bool Hero::isEmpty() const
{
	if (m_name[0] == '\0' && m_maximumHealth == 0)
		return true;
	else
		return false;
}

/////////////////////////////////////////////////
// sets the Hero object's health back to full
//
void Hero::respawn()
{
	m_health = m_maximumHealth;

}

bool Hero::isAlive() const
{

	if (m_health > 0) {

		return true;
	}
	else
		return false;
}



void Hero::deductHealth(int attack)
{
	m_health = m_health - attack;

}

void Hero::display(std::ostream & obj) const
{
	if (m_name != nullptr)
	{
		cout << m_name << endl;
	}
}

std::ostream & operator<<(std::ostream &out, const Hero &h)
{
	out << h.m_name;
	return out;
}

//////////////////////////////////////////////////////////////////
// Global helper function
// compute the damage that A inflicts on B 
// and of B on A
//
void applyDamage(Hero& A, Hero& B)
{
	bool rA = A.isAlive();
	bool rB = B.isAlive();
	if (rA == true && rB == true)
	{
		int atkB = B.getAttack();

		int atkA = A.getAttack();

		A.deductHealth(atkB);

		B.deductHealth(atkA);
	}


}

//////////////////////////////////////////////////////////////////
// Global helper operator
// rather than type in fight(hercules, theseus), we use an operator
// so you can type in hercules * theseus
//
// returns a reference to the winner object
// 
// so that if hercules is stronger, 
// (hercules * theseus) == hercules
// will be true.
// 
// note the inputs are const, so that you can be sure that the heros will be unharmed during the fight.
//
const Hero & operator* (const Hero & first, const Hero & second) {
	// Display the names of the people fighting

	cout << "AncientBattle! " << first << " vs " << second << " : ";

	// We want our heroes to exit the battle unharmed, so 
	// we make the input arguments const.
	// So how can we modify the objects during the fight?
	// We make copies of them.
	Hero A = first;
	Hero B = second;
//	int atck = A.getAttack();


	const Hero *winner = nullptr;

	// Now A will fight B, and winner will point to the winner.    
	// Main fight loop
	unsigned int rounds = 0;
	// loop while both are still alive
	// fight for 100 rounds
//	bool chk = A.isAlive();

	while (A.isAlive() && B.isAlive() && rounds < 100)
	{

		rounds++;

		applyDamage(A, B);
	}

	// if we got here, then one Hero is dead, or if both are alive then it was a draw.
	bool draw;

	if (A.isAlive() && B.isAlive()) { draw = true; }
	else { draw = false; }

	// if it was a draw, then we decide by tossing an unfair coin and always
	// declare that A was the winner. 
	if (draw)
	{
		winner = &first;
	}
	else if (A.isAlive())
	{
		winner = &first;
	}
	else
	{
		winner = &second;
	}

	// print out the winner
	cout << "Winner is " << *winner << " in " << rounds << " rounds." << endl;

	// return a reference to the winner
	return *winner;
}
